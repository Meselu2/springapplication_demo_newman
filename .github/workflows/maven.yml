# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on: push
jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
      with:
            project_id: spring-app-55394
            service_account_key: ${{ secrets.SA_CREDS}}
            export_default_credentials: true
    - name: Configure docker for GCP
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
          image: meselu27/springbot-application-image
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.USERNAME}}
          password: ${{ secrets.PASSWORD}}

  deploy:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: spring-app-55394
          service_account_key: ${{ secrets.SA_CREDS}}
          export_default_credentials: true
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@main
        with:
          image: meselu27/springbot-application-image:latest
          service: application-deployment
          region: us-central1
          platform: managed
          allow-unauthenticated: true
          env_vars: |
            FOO=bar
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'C05P2N971QS'
          # For posting a simple plain text message
          slack-message: "Application deployment result: ${{ job.status }}"
        env:
          SLACK_BOT_TOKEN: ${{secrets.SLACK_BOT_TOKEN }}
  api-test:
    runs-on: ubuntu-latest
    needs: [build_test, deploy]
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - name: Install node
      uses: actions/setup-node@v2
      with:
        node-version: "18"
    - name: "Install newman"
      run: npm install -g newman
    - name: "Run tests"
      run: newman run ./api_tests/Even-odd-test.postman_collection.json -e ./api_tests/even-odd-postman-enviroment.postman_environment.json --suppress-exit-code -r  json,cli --reporter-json-export .api_tests/newman/newman-run-report.json
          iteration_total=$(jq .run.stats.iterations.total ./api_tests/newman/newman-run-report.json)
          iteration_failed=$(jq .run.stats.iterations.failed ./api_tests/newman/newman-run-report.json)
          request_total=$(jq .run.stats.requests.total ./api_tests/newman/newman-run-report.json)
          request_failed=$(jq .run.stats.requests.failed ./api_tests/newman/newman-run-report.json)
          testScripts_total=$(jq .run.stats.testScripts.total ./api_tests/newman/newman-run-report.json)
          testScripts_failed=$(jq .run.stats.testScripts.failed ./api_tests/newman/newman-run-report.json)
          assertion_total=$(jq .run.stats.assertions.total ./api_tests/newman/newman-run-report.json)
          assertion_failed=$(jq .run.stats.assertions.failed ./api_tests/newman/newman-run-report.json)
        
#        let failed_status = $iteration_failed>0 || $request_failed>0 ||$testScripts_failed>0 ||$assertion_failed>0
          echo "::set-output name=iterations_total::$iterations_total
          echo "::set-output name=iteration_failed::$iteration_failed
          echo "::set-output name=request_total::$request_total
          echo "::set-output name=request_failed::$request_failed
          echo "::set-output name=testScripts_total::$testScripts_total
          echo "::set-output name=testScripts_failed::$testScripts_failed
          echo "::set-output name=assertion_total::$assertion_total
          echo "::set-output name=assertion_failed::$assertion_failed

#          echo "::set-output name=failed_status::failed_status

    - name: Publish report
      run: |
        
        let failureMessage = `
          "attachments": [
            {
              "mrkdwn_in": ["text"],
              "color": "#FF0000",
              "author_name": "${author}",
              "title": ":fire: Failures :fire:",
              "footer": "Newman Test",
              "footer_icon": "https://platform.slack-edge.com/img/default_application_icon.png"
            }
          ]`
        let successMessage = `
        "attachments": [
          {
            "mrkdwn_in": ["text"],
            "color": "#008000",
            "author_name": "${author}",
            "title": ":white_check_mark: All Passed :white_check_mark:",
            "footer": "Newman Test",
            "footer_icon": "https://platform.slack-edge.com/img/default_application_icon.png"
          }
        ]`
       curl -X POST -H 'Content-type: application/json' --data 
          '{"blocks": [
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*Test Summary*"
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": " "
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*Executed*\t\t*Failed*"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "Iteration"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "${{steps.newman.outputs.iterations_total}}\t\t\t\t\t\t${{steps.newman.outputs.iterations_failed}}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "Requests:"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "${{steps.newman.outputs.request_total}}\t\t\t\t\t\t${{steps.newman.outputs.request_failed}}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "test-scripts:"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "${{steps.newman.outputs.testScripts_total}}\t\t\t\t\t\t${{steps.newman.outputs.testScripts_failed}}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "Assertions:"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "${{steps.newman.outputs.assertion_total}}\t\t\t\t\t\t${{steps.newman.outputs.assertion_failed}}"
                    }
                ]
            },
            {
                "type": "section",
                "fields": [
                {
                    "type": "mrkdwn",
                    "text": "Average response time:"
                },
                {
                    "type": "mrkdwn",
                    "text": "000"
                }
            ]
            },
            {
                "type": "divider"
            }
        ],
        ${${{steps.newman.outputs.failed_status}} == true ? failureMessage : successMessage}
        }' https://hooks.slack.com/services/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
#
#
##      uses: MeilCli/slack-upload-file@v1
##      with:
##        slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
##        file_path: './api_tests/htmlreport.html'
##        file_name: 'postmanReport.html'
##        file_type: 'html'
##        channels: 'api-test'